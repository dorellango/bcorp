# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: serverless
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

plugins:
  - serverless-pseudo-parameters
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-dotenv-plugin

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x

  region: ${file(config/config.${self:provider.stage}.json):REGION, 'us-east-1'}
  stage: ${opt:stage, 'local'}

  environment:
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    SLS_DEBUG: ${file(config/config.${self:provider.stage}.json):SLS_DEBUG, 'false'}

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        # Necesary to create cheks/reminders
        - "dynamodb:DescribeStream"
        - "dynamodb:ListStreams"
      Resource:
        - arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/${self:custom.resultsTable}
    - Effect: "Allow"
      Action:
        - "dynamodb:Scan"
        - "dynamodb:Query"
        - "dynamodb:GetItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:PutItem"
        - "dynamodb:BatchWriteItem"
      Resource:
        - arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/${self:custom.resultsTable}
        - arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/${self:custom.resultsTable}/index/*
    - Effect: "Allow"
      Action:
        - "sqs:SendMessage"
        - "sqs:GetQueueUrl"
      Resource:
        - Fn::GetAtt: [musicKeeperSQS, Arn]

functions:
  search:
    handler: src/search.handler
    events:
      - http:
          path: /awesome-search
          method: get
          cors: true
          # request:
          #   schema:
          #     application/json: ${file(schemas/post.json)}
  listener:
    handler: src/listener.handler
    description: ƛ which read from DB stream and send them to a queue
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [resultsTable, StreamArn]
  keeper:
    handler: src/keeper.handler
    description: ƛ which read from SQS to save the music
    events:
      - sqs:
          arn:
            Fn::GetAtt: [reminderSQSBudgetCampaign, Arn]
          batchSize: 1
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  # Dynamo
  - ${file(resources/resultsTable.yml)}
  # Api Gateway authorizer
  - ${file(resources/apiGateway.yml)}
  # SQS
  - ${file(resources/sqs.yml)}
custom:
  resultsTable: results_${self:provider.stage}
  musicKeeperSQS: music_keeper_${self:provider.stage}
  # Dynamo
  dynamodb:
    stages:
      - local
    start:
      migrate: true
